#!/usr/bin/env node
"use strict";
if (process.argv[2] && process.argv[2].substring(0, 1) === "-" || process.argv[2] === "help") {
    process.argv.splice(process.argv.indexOf("--table"), 1);
}
var prgm = require("commander");
prgm.version("zookin v0.0.6 (jan'17)").usage("[-hV] <command> [-options] [--help]");

prgm.command("vigenere", "\x1b[33mcipher\x1b[0m: vigenere");
prgm.command("caesar", "\x1b[33mcipher\x1b[0m: Caesarean Shift");
prgm.command("rotate", "\x1b[33mcipher\x1b[0m: rotate");
prgm.command("skip", "\x1b[33mcipher\x1b[0m: skip");
prgm.command("affine", "\x1b[33mcipher\x1b[0m: affine");
prgm.command("bifid", "\x1b[33mcipher\x1b[0m: bifid");
prgm.command("playfair", "\x1b[33mcipher\x1b[0m: playfair");
prgm.command("score", "View the score of a string of text");
prgm.command("wordtree", "Generate a new wordtree based on the dictionary");
prgm.command("bruteforce", "Invoke every implemented \x1b[33mcipher\x1b[0m in bruteforce mode, and collect the results");
prgm.command("zws", "Zookin Web Service");

prgm.on("--help", function () {
    for (var i = 0; i < prgm.args.length; i++) {
        if (!(/\-/).test(prgm.args[i])) {
            console.error("  \x1b[31mUnknown command: " + prgm.args[i] + "\x1b[0m");
            break;
        }
    }
});
prgm.parse(process.argv);
if (!prgm.hasOwnProperty("runningCommand")) {
    if (prgm.args[0] !== "completion") {
        prgm.help();
    }
}

if (typeof process.argv[2] === "undefined") {
    prgm.help();
}
