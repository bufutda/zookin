#!/usr/bin/env node
"use strict";
var utils = require(__dirname + "/../lib/utils");
var child_process = require("child_process");
var ProgressBar = require("progress");

var prgm = require("commander");
prgm.option("-p, --password-file <path>", "Specify a password dictionary for bruteforcing")
    .option("-c, --cipher-text <text>", "Text to encrypt or decrypt")
    .option("-t, --scoreboard <int>", "Number of entries to keep in the scoreboard (10)")
    .parse(process.argv);

if (!prgm.hasOwnProperty("cipherText")) {
    console.error("Error: Required switch: -c");
    prgm.help();
} else {
    prgm.cipherText = prgm.cipherText.replace(/ /gmi, "");
}
var top = [];
var superTop = [];
var children = {
    vigenere: NaN,
    rotate: NaN,
    skip: NaN,
    caesar: NaN
};
for (var i = 0; i < (prgm.scoreboard ? prgm.scoreboard : 10); i++) {
    top.push(["", 0, "", [], ""]);
}
function dataListener (data, origin, stream) { // eslint-disable-line require-jsdoc
    if (stream === "stderr") {
        process.stderr.write("[" + origin + "] ");
        console.error(data);
    } else {
        data = data.split(" ");
        var d = {
            class: data[0],
            result: data[1],
            score: data[2],
            key: data[3]
        };
        data.splice(0, 4);
        d.splits = data;
        if (d.class === "super") {
            superTop.push([d.result, d.score, d.key, d.splits, origin]);
        } else if (d.splits.length > top[top.length - 1][3].length) {
            utils.insert(top, d.result, d.score, d.key, d.splits, origin);
        }
    }
}
/**
 * Convert raw buffered data into segmented strings that dataListener can ingest
 * @param {Buffer} data - the raw data from a child process
 * @param {String} origin - the name of the origin process
 * @param {String} stream - either 'stdout' or 'stderr'
 * @returns {Undefined} undefined
 */
function sd (data, origin, stream) {
    data = data.toString().split("\n");
    for (var i = 0; i < data.length; i++) {
        if (data[i].length) {
            dataListener(data[i], origin, stream);
        }
    }
}
function closeListener (code, origin) { // eslint-disable-line require-jsdoc
    bar.tick({word: superTop.length ? superTop[0][0] : top[0][0]});
    children[origin] = code;
    for (var prop in children) {
        if (isNaN(children[prop])) {
            return;
        }
    }
    var tbl = new utils.Table({
        head: ["P%", "Key", "Result", "SplitLogic", "Cipher"]
    });
    for (var i = 0; i < superTop.length; i++) {
        tbl.push(["\x1b[32m" + Math.floor(100 * superTop[i][1] / top[0][1]), "\x1b[32m" + superTop[i][2], "\x1b[32m" + superTop[i][0], utils.separateString(superTop[i][0], superTop[i][3]), superTop[i][4]]);
    }
    for (var i = 0; i < top.length; i++) {
        if (top[i][1]) {
            tbl.push([Math.floor(100 * top[i][1] / top[0][1]), top[i][2], top[i][0], utils.separateString(top[i][0], top[i][3]), top[i][4]]);
        }
    }
    console.log(tbl.toString());
    var code = 0;
    for (var prop in children) {
        if (children[prop] !== 0) {
            console.log(prop + " exited with code " + children[prop]);
            code++;
        }
    }
    utils.shutdown(code);
}

process.stdout.write("\x1b[?25l");
var bar = new ProgressBar("\x1b[35mBruteforce\x1b[0m    [\x1b[34m:current\x1b[0m / \x1b[34m:total\x1b[0m][\x1b[34m:elapsed\x1b[0ms] \x1b[33m╢\x1b[0m:bar\x1b[33m╟\x1b[0m :word", {
    total: 4,
    stream: process.stdout,
    width: process.stdout.columns,
    complete: "\x1b[32m█\x1b[0m",
    incomplete: "\x1b[31m░\x1b[0m",
    renderThrottle: 5000,
    callback: function () {}
});

var vigenere = child_process.spawn("node", [__dirname + "/zookin-vigenere", "-p", prgm.passwordFile ? prgm.passwordFile : __dirname + "/../lib/dict/words2.txt", "-c", prgm.cipherText, "-b", "-t", prgm.scoreboard ? prgm.scoreboard : "10", "--simple"]);
vigenere.stdout.on("data", function (d) { sd(d, "vigenere", "stdout"); });
vigenere.stderr.on("data", function (d) { sd(d, "vigenere", "stderr"); });
vigenere.on("close", function (c) { closeListener(c, "vigenere"); });

var rotate = child_process.spawn("node", [__dirname + "/zookin-rotate", "-c", prgm.cipherText, "-b", "-t", prgm.scoreboard ? prgm.scoreboard : "10", "--simple"]);
rotate.stdout.on("data", function (d) { sd(d, "rotate", "stdout"); });
rotate.stderr.on("data", function (d) { sd(d, "rotate", "stderr"); });
rotate.on("close", function (c) { closeListener(c, "rotate"); });

var skip = child_process.spawn("node", [__dirname + "/zookin-skip", "-c", prgm.cipherText, "-b", "-t", prgm.scoreboard ? prgm.scoreboard : "10", "--simple"]);
skip.stdout.on("data", function (d) { sd(d, "skip", "stdout"); });
skip.stderr.on("data", function (d) { sd(d, "skip", "stderr"); });
skip.on("close", function (c) { closeListener(c, "skip"); });

var caesar = child_process.spawn("node", [__dirname + "/zookin-caesar", "-c", prgm.cipherText, "-b", "-t", prgm.scoreboard ? prgm.scoreboard : "10", "--simple"]);
caesar.stdout.on("data", function (d) { sd(d, "caesar", "stdout"); });
caesar.stderr.on("data", function (d) { sd(d, "caesar", "stderr"); });
caesar.on("close", function (c) { closeListener(c, "caesar"); });
