#!/usr/bin/env node
"use strict";
var utils = require(__dirname + "/../lib/utils");
var child_process = require("child_process");
var prgm = require("commander");
prgm.option("-p, --password-file <path>", "Specify a password dictionary for bruteforcing")
    .option("-c, --cipher-text <text>", "Text to encrypt or decrypt")
    .option("-t, --scoreboard <int>", "Number of entries to keep in the scoreboard (10)")
    .option("--table", "Output in table mode")
    .parse(process.argv);
if (!prgm.hasOwnProperty("table")) {
    var multimeter = require("multimeter");
}

if (!prgm.hasOwnProperty("cipherText")) {
    console.error("Error: Required switch: -c");
    prgm.help();
} else {
    prgm.cipherText = prgm.cipherText.replace(/ /gmi, "");
}
var top = [];
var superTop = [];
var children = {};
var bars = {};
var barData = {};
for (var i = 0; i < (prgm.scoreboard ? prgm.scoreboard : 10); i++) {
    top.push(["", 0, "", [], ""]);
}
function dataListener (data, origin, stream) { // eslint-disable-line require-jsdoc
    if (stream === "stderr") {
        process.stderr.write("[" + origin + "] ");
        if (!prgm.hasOwnProperty("table")) {
            multi.write(data);
            multi.write("\n");
        }
    } else {
        data = data.split(" ");
        if (data[0].substr(0, 2) === "--") {
            if (!prgm.hasOwnProperty("table")) {
                bars[origin].percent(bars[origin].progress.percent + 1, " " + (bars[origin].progress.percent + 1) + "% " + barData[origin].top[0] + "                              ");
            }
        } else {
            var d = {
                class: data[0],
                result: data[1],
                score: data[2],
                key: data[3]
            };
            data.splice(0, 4);
            d.splits = data;
            if (d.class === "super") {
                superTop.push([d.result, d.score, d.key, d.splits, origin]);
            } else if (d.splits.length > top[top.length - 1][3].length) {
                if (d.score > top[top.length - 1][1]) {
                    utils.insert(top, d.result, d.score, d.key, d.splits, origin);
                }
            }
            if ((d.splits.length > barData[origin].top[3].length) || (d.splits.length === barData[origin].top[3].length && d.score > barData[origin].top[1])) {
                barData[origin].top = [(d.class === "super" ? "\x1b[32m" : "\x1b[31m") + d.result + "\x1b[0m", d.score, d.key, d.splits];
            }
        }
    }
}
/**
 * Convert raw buffered data into segmented strings that dataListener can ingest
 * @param {Buffer} data - the raw data from a child process
 * @param {String} origin - the name of the origin process
 * @param {String} stream - either 'stdout' or 'stderr'
 * @returns {Undefined} undefined
 */
function sd (data, origin, stream) {
    data = data.toString().split("\n");
    for (var i = 0; i < data.length; i++) {
        if (data[i].length) {
            dataListener(data[i], origin, stream);
        }
    }
}
function closeListener (code, origin) { // eslint-disable-line require-jsdoc
    children[origin] = code;
    if (!prgm.hasOwnProperty("table")) {
        if (code !== 0) {
            bars[origin].percent(0, " 0% \x1b[33mFAILED\x1b[0m                              ");
        } else {
            bars[origin].percent(100, " 100% " + barData[origin].top[0] + " " + process.uptime() + "s");
        }
    }
    for (var prop in children) {
        if (isNaN(children[prop])) {
            return;
        }
    }
    if (!prgm.hasOwnProperty("table")) {
        multi.destroy();
    }
    var tbl = new utils.Table({
        head: ["P%", "Key", "Result", "SplitLogic", "Cipher"]
    });
    for (var i = 0; i < superTop.length; i++) {
        tbl.push(["\x1b[32m" + Math.floor(100 * superTop[i][1] / top[0][1]), "\x1b[32m" + superTop[i][2], "\x1b[32m" + superTop[i][0], utils.separateString(superTop[i][0], superTop[i][3]), superTop[i][4]]);
    }
    for (var i = 0; i < top.length; i++) {
        if (top[i][1]) {
            tbl.push([Math.floor(100 * top[i][1] / top[0][1]), top[i][2], top[i][0], utils.separateString(top[i][0], top[i][3]), top[i][4]]);
        }
    }
    console.log(tbl.toString());
    var code = 0;
    for (var prop in children) {
        if (children[prop] !== 0) {
            console.log(prop + " exited with code " + children[prop]);
            code++;
        }
    }
    console.log("Operation took " + process.uptime() + "s");
}

if (!prgm.hasOwnProperty("table")) {
    var multi = multimeter(process);
    multi.on("^C", process.exit);
    multi.charm.reset();
    multi.write("Running a bruteforce attack on \x1b[33m" + prgm.cipherText + "\x1b[0m\n");
}
var setup = {
    affine: [__dirname + "/zookin-affine", "-c", prgm.cipherText, "-b", "-t", prgm.scoreboard ? prgm.scoreboard : "10", "--simple"],
    rotate: [__dirname + "/zookin-rotate", "-c", prgm.cipherText, "-b", "-t", prgm.scoreboard ? prgm.scoreboard : "10", "--simple"],
    skip: [__dirname + "/zookin-skip", "-c", prgm.cipherText, "-b", "-t", prgm.scoreboard ? prgm.scoreboard : "10", "--simple"],
    caesar: [__dirname + "/zookin-caesar", "-c", prgm.cipherText, "-b", "-t", prgm.scoreboard ? prgm.scoreboard : "10", "--simple"],
    vigenere: [__dirname + "/zookin-vigenere", "-p", prgm.passwordFile ? prgm.passwordFile : __dirname + "/../lib/dict/words2.txt", "-c", prgm.cipherText, "-b", "-t", prgm.scoreboard ? prgm.scoreboard : "10", "--simple"],
    bifid: [__dirname + "/zookin-bifid", "-c", prgm.cipherText, "-b", "-t", prgm.scoreboard ? prgm.scoreboard : "10", "--simple"],
    playfair: [__dirname + "/zookin-playfair", "-c", prgm.cipherText, "-b", "-t", prgm.scoreboard ? prgm.scoreboard : "10", "--simple"]
};
var ch = {};
var c = 2;
for (var prop in setup) {
    (function (counter, prop) {
        children[prop] = NaN;
        ch[prop] = child_process.spawn("node", setup[prop]);
        ch[prop].stdout.on("data", function (d) { sd(d, prop, "stdout"); });
        ch[prop].stderr.on("data", function (d) { sd(d, prop, "stderr"); });
        ch[prop].on("close", function (c) { closeListener(c, prop); });
        if (!prgm.hasOwnProperty("table")) {
            multi.write(prop.substr(0, 1).toUpperCase() + prop.substr(1) + ": \n");
            bars[prop] = multi(12, counter++, {
                width: 100,
                solid: {foreground: "green", text: "█"},
                empty: {foreground: "red", text: "░"},
                before: "╢",
                after: "\x1b[0m╟"
            });
        }
        barData[prop] = {
            total: null,
            received: 0,
            top: ["", 0, "", []]
        };
    })(c++, prop);
}
if (!prgm.hasOwnProperty("table")) {
    multi.write("\nWorking...\n");
}
