#!/usr/bin/env node

var ProgressBar = require('progress');
var fs = require("fs");
var Event = require("events").EventEmitter;
var Table = require("cli-table");
var vigenere = require(__dirname + "/../lib/cipher/KeyedVigenere");
var validate = require(__dirname + "/../lib/validateString");

var prgm = require("commander");
prgm.option("-p, --password-file <path>", "Specify a password dictionary for bruteforcing")
    .option("-c, --cipher-text <text>", "Text to encrypt or decrypt")
    .option("-e, --encrypt", "Set mode to encrypt")
    .option("-d, --decrypt", "Set mode to decrypt")
    .option("-k, --key <password>", "Key to use for encryption/decryption")
    .option("-b, --bruteforce", "Attempt to bruteforce the cipher")
    .parse(process.argv);

if (!prgm.hasOwnProperty("cipherText")) {
    console.error("Error: Required switch: -c");
    prgm.help();
} else {
    prgm.cipherText = prgm.cipherText.replace(/ /gmi, "");
}
if (prgm.bruteforce) {
    if (prgm.key || prgm.decrypt || prgm.encrypt) {
        console.error("Error: Incompatible switches");
        prgm.help();
    }
    console.log("Attempting to bruteforce Vigenere Ciphertext: " + prgm.cipherText);
    var go = new Event();
    var top = [];
    var superTop = [];
    for (var i = 0; i < 25; i++)
        top.push(["", 0, "", []]);
    var words = fs.readFileSync(prgm.passwordFile ? __dirname + "/" + prgm.passwordFile : __dirname + "/../lib/dict/words2.txt").toString().split("\n");
    words.splice(0,0,"");
    function insert(string, score, key, split) {
        for (var i = 0; i < top.length; i++) {
            if (split.length > top[i][3].length) {
                if (score > top[i][1]) {
                    top[i] = [string, score, key, split];
                    break;
                }
            }
        }
    }
    function shutdown() {
        process.stdout.write("\033[?25h");
        process.stdout.write("\033[0m\n");
        process.exit();
    }

    process.stdout.write("\033[?25l");
    var bar = new ProgressBar('\033[35mVigenere\033[0m    [\033[34m:current\033[0m / \033[34m:total\033[0m][\033[34m:percent\033[0m][\033[34m:elapsed\033[0ms - \033[34m:eta\033[0ms] \033[33m╢\033[0m:bar\033[33m╟\033[0m :word', {
        total: words.length,
        stream: process.stdout,
        width: process.stdout.columns,
        complete: "\033[32m█\033[0m",
        incomplete: "\033[31m░\033[0m",
        renderThrottle: 5000,
        callback: function() {
            console.log("");
            var tbl = new Table({
                head: ["P%", "Key", "Result", "SplitLogic"]
            });
            for (var i = 0; i < superTop.length; i++) {
                tbl.push(["\x1b[32m" + Math.floor(100 * superTop[i][1] / top[0][1]), "\x1b[32m" + superTop[i][2], "\x1b[32m" + superTop[i][0], separateString(superTop[i][0], superTop[i][3])]);
            }
            for (var i = 0; i < top.length; i++)
                if (top[i][1]) {
                    tbl.push([Math.floor(100 * top[i][1] / top[0][1]), top[i][2], top[i][0], separateString(top[i][0], top[i][3])]);
                }
            debugger;
            console.log(tbl.toString());
            shutdown();
        }
    });

    var counterIndex = 0;
    go.on("next", function() {
        bar.tick({word: words[counterIndex].toLowerCase()});
        var res = vigenere(-1, prgm.cipherText, words[counterIndex], "", "");
        validate(res, function (sc, split, full) {
            debugger;
            if (full) {
                superTop.push([res, sc, words[counterIndex], split]);
            } else if (split.length > top[top.length-1][3].length) {
                if (sc > top[top.length-1][1]) {
                    insert(res,sc,words[counterIndex],split);
                }
            }
            counterIndex++;
            if (counterIndex < words.length) {
                process.nextTick(function() {
                    go.emit("next");
                });
            }
        });
    });
    go.emit("next");

    process.on("exit", shutdown);
    process.on("SIGINT", shutdown);
    process.on("SIGHUP", shutdown);
} else if (prgm.encrypt) {
    console.log(vigenere(1, prgm.cipherText, prgm.key ? prgm.key : "", "", ""));
} else if (prgm.decrypt) {
    console.log(vigenere(-1, prgm.cipherText, prgm.key ? prgm.key : "", "", ""));
}
function separateString (string, splits) {
    var str = [];
    for (var i = 0; i < splits.length - 1; i++) {
        str.push(string.substring(splits[i], splits[i + 1]));
    }
    return str.join("\x1b[31m|\x1b[0m");
}
