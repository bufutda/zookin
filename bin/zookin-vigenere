#!/usr/bin/env node
"use strict";
var ProgressBar = require("progress");
var utils = require(__dirname + "/../lib/utils");
var fs = require("fs");
var Event = require("events").EventEmitter;
var bases = require("bases");
var vigenere = require(__dirname + "/../lib/cipher/KeyedVigenere");

var prgm = require("commander");
prgm.option("-p, --password-file <path>", "Specify a password dictionary for bruteforcing")
    .option("-c, --cipher-text <text>", "Text to encrypt or decrypt")
    .option("-e, --encrypt", "Set mode to encrypt")
    .option("-d, --decrypt", "Set mode to decrypt")
    .option("-k, --key <password>", "Key to use for encryption/decryption")
    .option("-b, --bruteforce", "Attempt to bruteforce the cipher")
    .option("-f, --force-all <int>", "Ignore the dictionary and run an attack up to entropy level specified", parseInt)
    .option("-t, --scoreboard <int>", "Number of entries to keep in the scoreboard (10)")
    .option("--simple", "Only log possible matches and updates")
    .option("--supersimple", "Only log possible matches")
    .option("--table", "Output in table mode")
    .parse(process.argv);
if (prgm.hasOwnProperty("supersimple")) {
    prgm.simple = prgm.supersimple;
}
if (!prgm.hasOwnProperty("cipherText")) {
    console.error("Error: Required switch: -c");
    prgm.help();
} else {
    prgm.cipherText = prgm.cipherText.replace(/ /gmi, "");
}
if (prgm.bruteforce) {
    if (prgm.key || prgm.decrypt || prgm.encrypt || prgm.forceAll) {
        console.error("Error: Incompatible switches");
        prgm.help();
    }
    if (!prgm.hasOwnProperty("simple")) {
        console.log("Attempting to bruteforce Vigenere Ciphertext: " + prgm.cipherText);
    }
    var go = new Event();
    var top = [];
    var superTop = [];
    for (var i = 0; i < (prgm.scoreboard ? prgm.scoreboard : 10); i++) {
        top.push(["", 0, "", []]);
    }
    var words = fs.readFileSync(prgm.passwordFile ? prgm.passwordFile : __dirname + "/../lib/dict/words2.txt").toString().split("\n");
    words.splice(0, 0, "");
    if (!prgm.hasOwnProperty("simple") && !prgm.hasOwnProperty("table")) {
        process.stdout.write("\x1b[?25l");
        var bar = new ProgressBar("\x1b[35mVigenere\x1b[0m    [\x1b[34m:current\x1b[0m / \x1b[34m:total\x1b[0m][\x1b[34m:percent\x1b[0m][\x1b[34m:elapsed\x1b[0ms - \x1b[34m:eta\x1b[0ms] \x1b[33m╢\x1b[0m:bar\x1b[33m╟\x1b[0m :word", {
            total: words.length,
            stream: process.stdout,
            width: process.stdout.columns,
            complete: "\x1b[32m█\x1b[0m",
            incomplete: "\x1b[31m░\x1b[0m",
            renderThrottle: 5000,
            callback: function () {
                console.log("");
                var tbl = utils.getTable({
                    head: ["P%", "Key", "Result", "SplitLogic"]
                });
                for (var i = 0; i < superTop.length; i++) {
                    tbl.push(["\x1b[32m" + Math.floor(100 * superTop[i][1] / top[0][1]), "\x1b[32m" + superTop[i][2], "\x1b[32m" + superTop[i][0], utils.separateString(superTop[i][0], superTop[i][3])]);
                }
                for (var i = 0; i < top.length; i++) {
                    if (top[i][1]) {
                        tbl.push([Math.floor(100 * top[i][1] / top[0][1]), top[i][2], top[i][0], utils.separateString(top[i][0], top[i][3])]);
                    }
                }
                console.log(tbl.toString());
                utils.shutdown();
            }
        });
    }

    var counterIndex = 0;
    var percent = 1;
    go.on("next", function () {
        if (!prgm.hasOwnProperty("simple") && !prgm.hasOwnProperty("table")) {
            bar.tick({word: words[counterIndex].toLowerCase()});
        }
        var res = vigenere(-1, prgm.cipherText, words[counterIndex], "", "");
        utils.validate(res, function (sc, split, full) {
            if (full) {
                if (prgm.hasOwnProperty("simple")) {
                    console.log(["super", res, sc, words[counterIndex], split.join(" ")].join(" "));
                } else {
                    superTop.push([res, sc, words[counterIndex], split]);
                }
            } else if (split.length > top[top.length - 1][3].length) {
                if (sc > top[top.length - 1][1]) {
                    utils.insert(top, res, sc, words[counterIndex], split);
                    if (prgm.hasOwnProperty("simple")) {
                        console.log(["top", res, sc, words[counterIndex], split.join(" ")].join(" "));
                    }
                }
            }
            counterIndex++;
            if (prgm.hasOwnProperty("simple") && (counterIndex / words.length * 100) >= percent) {
                if (!prgm.hasOwnProperty("supersimple")) {
                    console.log("-- " + counterIndex);
                }
                percent += 1;
            }
            if (counterIndex < words.length) {
                process.nextTick(function () {
                    go.emit("next");
                });
            } else if (prgm.hasOwnProperty("table")) {
                var tbl = utils.getTable({
                    head: ["P%", "Key", "Result", "SplitLogic"]
                });
                for (var i = 0; i < superTop.length; i++) {
                    tbl.push(["\x1b[32m" + Math.floor(100 * superTop[i][1] / top[0][1]), "\x1b[32m" + superTop[i][2], "\x1b[32m" + superTop[i][0], utils.separateString(superTop[i][0], superTop[i][3])]);
                }
                for (var i = 0; i < top.length; i++) {
                    if (top[i][1]) {
                        tbl.push([Math.floor(100 * top[i][1] / top[0][1]), top[i][2], top[i][0], utils.separateString(top[i][0], top[i][3])]);
                    }
                }
                console.log(tbl.toString());
                process.exit(0);
            } else {
                process.exit(0);
            }
        });
    });
    go.emit("next");

    utils.listenForExit();
} else if (prgm.encrypt) {
    console.log(vigenere(1, prgm.cipherText, prgm.key ? prgm.key : "", "", ""));
} else if (prgm.decrypt) {
    console.log(vigenere(-1, prgm.cipherText, prgm.key ? prgm.key : "", "", ""));
} else if (prgm.forceAll) {
    var max_str = "";
    for (var i = 0; i < prgm.forceAll; i++) {
        max_str += "z";
    }
    var max = bases.fromBase26(max_str);
    console.log("Running a full bruteforce on " + prgm.cipherText);
    console.log("Estimated Calc Time: " + (0.03 * max) + "ms");
    var go = new Event();
    var counter = 0;
    console.time("operation");
    go.on("next", function () {
        var op = process.hrtime();
        var res = vigenere(-1, prgm.cipherText, bases.toBase26(counter), "", "");
        utils.validate(res, function (score, split, full) {
            // if (full) {
            console.log(process.hrtime(op)[1] + " " + res + " " + bases.toBase26(counter) + " " + split.length + " " + score);
            // } else if (split.length > top[top.length - 1][3].length) {
            //     if (score > top[top.length - 1][1]) {
            //         utils.insert(top, res, score, words[counterIndex], split);
            //         if (prgm.hasOwnProperty("simple")) {
            //             console.log(["top", res, score, words[counterIndex], split.join(" ")].join(" "));
            //         }
            //     }
            // }
            counter++;
            if (counter < max) {
                process.nextTick(function () {
                    go.emit("next");
                });
                return;
            }
            console.timeEnd("operation");
            process.exit(0);
        });
    });
    go.emit("next");
}
