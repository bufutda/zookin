#!/usr/bin/env node
"use strict";
var fs = require("fs");
var path = require("path");
var prgm = require("commander");
var read = require("read");
var child_process = require("child_process");

prgm.option("-g, --generate-from-file <path>", "Generate a new WordTree from the dictionary at <path>; save it to lib/dict/wordtree.json")
    .option("-a, --add <word>", "Add a word to the wordtree at lib/dict/wordtree.json")
    .option("-x, --exists <word>", "Check if a word is in the wordtree at lib/dict/wordtree.json")
    .option("--export <path>", "Export the wordtree to the path specified")
    .option("--import <path>", "Import the wordtree at the path specified")
    .option("--table", "DO-NOT-USE")
    .parse(process.argv);

if (prgm.generateFromFile) {
    if (prgm.hasOwnProperty("table")) {
        console.error("\x1b[31mFatal\x1b[0m: Cannot modify wordTree in a ZWS session");
        process.exit(1);
    }
    var words = fs.readFileSync(prgm.generateFromFile).toString().split("\n");

    var wT = {};

    function recursiveTreeBuild (c, o, w) { // eslint-disable-line require-jsdoc
        if (o.hasOwnProperty(w[c])) {
            var fO = o[w[c]];
        } else {
            o[w[c]] = {};
            var fO = o[w[c]];
        }

        if (c === w.length - 1) {
            o[w[c]]._ = 1;
            return;
        }
        return recursiveTreeBuild(c + 1, fO, w);
    }

    for (var i = 0; i < words.length; i++) {
        var word = words[i].toUpperCase().split("");
        if (word.length) {
            recursiveTreeBuild(0, wT, word);
        }
    }
    fs.writeFileSync(__dirname + "/../lib/dict/wordTree.json", JSON.stringify(wT));
    console.log("Created word tree: lib/dict/wordTree.json");
    process.exit(0);
}
if (prgm.add) {
    prgm.add = prgm.add.toUpperCase();
    if (/[^A-Z]/.test(prgm.add)) {
        console.error("\x1b[31mFatal\x1b[0m:\tWord must be alpha-numeric: " + prgm.add);
        process.exit(1);
    }
    var wordTree = require(__dirname + "/../lib/dict/wordTree.json");
    var o = wordTree;
    for (var i = 0; i < prgm.add.length; i++) {
        if (o.hasOwnProperty(prgm.add[i])) {
            o = o[prgm.add[i]];
        } else {
            o[prgm.add[i]] = {};
            o = o[prgm.add[i]];
        }
    }
    if (o.hasOwnProperty("_")) {
        console.error("\x1b[31mFatal\x1b[0m:\tWord already exists");
        process.exit(1);
    } else {
        o._ = 1;
        fs.writeFileSync(__dirname + "/../lib/dict/wordTree.json", JSON.stringify(wordTree));
        console.log("Word added to lib/dict/wordTree.json");
        process.exit(0);
    }
}
if (prgm.exists) {
    var exists = prgm.exists.toUpperCase();
    if (/[^A-Z]/.test(exists)) {
        console.error("\x1b[31mFatal\x1b[0m:\tWord must be alpha-numeric: " + prgm.exists);
        process.exit(1);
    }
    var wordTree = require(__dirname + "/../lib/dict/wordTree.json");
    var o = wordTree;
    for (var i = 0; i < exists.length; i++) {
        if (o.hasOwnProperty(exists[i])) {
            o = o[exists[i]];
        } else {
            console.log(exists + " does not exist. Add it with zookin wordtree -a " + exists);
            process.exit(1);
        }
    }
    if (o.hasOwnProperty("_")) {
        console.log(exists + " exists.");
        process.exit(0);
    } else {
        console.log(exists + " does not exist. Add it with zookin wordtree -a " + exists);
        process.exit(1);
    }
}
if (prgm.export) {
    if (prgm.hasOwnProperty("table")) {
        console.error("\x1b[31mFatal\x1b[0m: Cannot modify wordTree in a ZWS session");
        process.exit(1);
    }
    function overwriteFile (p) { // eslint-disable-line require-jsdoc
        read({
            prompt: "Overwrite \x1b[33m" + path.basename(p) + "\x1b[0m? [y/N] "
        }, function (err, result, isDefault) {
            if (err) {
                throw err;
            }
            switch (result.toLowerCase()) {
                case "n":
                case "":
                case "no":
                    process.exit(0);
                    break;
                case "y":
                case "yes":
                    writeFile(p);
                    break;
                default:
                    overwriteFile(p);
                    break;
            }
        });
    }
    function checkDir (p) { // eslint-disable-line require-jsdoc
        fs.stat(path.resolve(p + "/wordTree.gz"), function (err, stat) {
            if (err) {
                writeFile(path.resolve(p + "/wordTree.gz"));
            } else if (stat.isDirectory()) {
                console.error("\x1b[31mFatal\x1b[0m: " + path.resolve(p + "/wordTree.gz") + " is a directory");
                process.exit(1);
            } else if (stat.isFile()) {
                overwriteFile(path.resolve(p + "/wordTree.gz"));
            }
        });
    }
    function writeFile (p) { // eslint-disable-line require-jsdoc
        child_process.exec("gzip -9qc " + __dirname + "/../lib/dict/wordTree.json > " + p, function (err, stdout, stderr) {
            if (err) {
                throw err;
            } else {
                console.log("Exported wordTree to " + p);
                process.exit(0);
            }
        });
    }
    var p = path.resolve(prgm.export);
    fs.stat(p, function (err, stat) {
        if (err) {
            fs.stat(path.dirname(p), function (err, stat) {
                if (err) {
                    console.error("\x1b[31mFatal\x1b[0m: " + path.dirname(p) + " does not exist");
                    process.exit(1);
                } else if (stat.isDirectory()) {
                    writeFile(p);
                } else if (stat.isFile()) {
                    console.error("\x1b[31mFatal\x1b[0m: " + p + " does not exist");
                    process.exit(1);
                }
            });
        } else if (stat.isDirectory()) {
            checkDir(p);
        } else if (stat.isFile()) {
            overwriteFile(p);
        }
    });
}
if (prgm.import) {
    if (prgm.hasOwnProperty("table")) {
        console.error("\x1b[31mFatal\x1b[0m: Cannot modify wordTree in a ZWS session");
        process.exit(1);
    }
    var p = path.resolve(prgm.import);
    fs.stat(p, function (err, stat) {
        if (err) {
            console.error("\x1b[31mFatal\x1b[0m: " + p + " does not exist");
            process.exit(1);
        } else if (stat.isDirectory()) {
            console.error("\x1b[31mFatal\x1b[0m: " + p + " is a directory");
        } else if (stat.isFile()) {
            child_process.exec("gzip -dcN " + p + " > " + __dirname + "/tmp", function (err, stdout, stderr) {
                if (err) {
                    console.log("\x1b[31mFata\x1b[0m: " + p + " is not an exported wordTree");
                    fs.unlink(__dirname + "/tmp");
                    process.exit(1);
                } else {
                    fs.rename(__dirname + "/tmp", __dirname + "/../lib/dict/wordTree.json", function (err) {
                        if (err) {
                            throw err;
                        } else {
                            console.log("Imported new wordTree.");
                            (function askDelete () {
                                read({
                                    prompt: "Delete \x1b[33m" + path.basename(p) + "\x1b[0m? [y/N] "
                                }, function (err, response, isDefault) {
                                    if (err) {
                                        throw err;
                                    } else {
                                        switch (response.toLowerCase()) {
                                            case "n":
                                            case "no":
                                            case "":
                                                process.exit(0);
                                                break;
                                            case "y":
                                            case "yes":
                                                fs.unlink(p, function (err) {
                                                    if (err) {
                                                        throw err;
                                                    } else {
                                                        process.exit(0);
                                                    }
                                                });
                                                break;
                                            default:
                                                askDelete();
                                                break;
                                        }
                                    }
                                });
                            })();
                        }
                    });
                }
            });
        }
    });
}
